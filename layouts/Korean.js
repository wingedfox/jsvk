// #############################################################################

var Korean={
Jamo: {
// bits: 1: vowel, 2:
'\u3131':[14, 44032+588*0, 1], //g
'\u3132':[6, 44032+588*1, 2], //gg
'\u3133':[4,-1, 3], //gs
'\u3134':[14, 44032+588*2, 4], //n
'\u3135':[4,-1, 5], //nj
'\u3136':[4, -1, 6], //nh
'\u3137':[6, 44032+588*3, 7], //d
'\u3138':[2, 44032+588*4, 0], //dd
'\u3139':[14, 44032+588*5, 8], //r
'\u313a':[4, -1, 9], //lg
'\u313b':[4, -1, 10], //lm
'\u313c':[4, -1, 11], //lb
'\u313d':[4, -1, 12], //ls
'\u313e':[4, -1, 13], //lt
'\u313f':[4, -1, 14], //lp
'\u3140':[4, -1, 15], //lh
'\u3141':[6, 44032+588*6, 16], //m
'\u3142':[14, 44032+588*7, 17], //b
'\u3143':[2, 44032+588*8, 0], //bb
'\u3144':[4, -1, 18], //bs
'\u3145':[14, 44032+588*9, 19], //s
'\u3146':[6, 44032+588*10, 20], //ss
'\u3147':[6, 44032+588*11, 21], //ng
'\u3148':[6, 44032+588*12, 22], //j
'\u3149':[2, 44032+588*13, 0], //jj
'\u314a':[6, 44032+588*14, 23], //ch
'\u314b':[6, 44032+588*15, 24], //k
'\u314c':[6, 44032+588*16, 25], //t
'\u314d':[6, 44032+588*17, 26], //p
'\u314e':[6, 44032+588*18, 27], //h
'\u314f':[1,0, 0], //a
'\u3150':[1,28*1, 0], //ae
'\u3151':[1,28*2, 0], //ya
'\u3152':[1,28*3, 0], //yae
'\u3153':[1,28*4, 0], //eo
'\u3154':[1, 28*5, 0], //e
'\u3155':[1, 28*6, 0], //yeo
'\u3156':[1, 28*7, 0], //ye
'\u3157':[1,28*8, 0], //o
'\u315b':[1, 28*12,0], //yo
'\u315c':[1, 28*13,0], //u
'\u3160':[1, 28*17,0], //yu ?
'\u3161':[1, 28*18,0], //eu
'\u3163':[1,28*20,0] //i
},

VV2V:[0,0,0,0,0,0,0,0,0,8*28,8*28,8*28,0,0,13*28,13*28,13*28,0,0,18*28,0],
V2VV:[0,0,0,0,0,0,0,0,{'\u314f':28*9, '\u3150':28*10, '\u3163':28*11},0,0,0,0,{'\u3153':28*14,'\u3154':28*15,'\u3163':28*16},0,0,0,0, {'\u3163':28*19},0,0],
CV2C: ['\u3131','\u3132','\u3134','\u3137','\u3138','\u3139','\u3141','\u3142','\u3143','\u3145','\u3146','\u3147','\u3148','\u3149','\u314a','\u314b','\u314c','\u314d','\u314e'],
C2CC: {'\u3131':'\u3132','\u3137':'\u3138','\u3142':'\u3143','\u3145':'\u3146','\u3148':'\u3149'},
CC2C: {'\u3132':'\u3131','\u3138':'\u3137','\u3143':'\u3142','\u3146':'\u3145','\u3149':'\u3148'},
PP2P:[
0,
0,1,1, //g gg gs
0,4,4, //n nj nh
0, //d
0, //r
8,8,8,8,8,8,8, // l*
0, //m
0,17, // b bs
0,19, //s ss
0,0,0,0,0,0,0 //ng j ch k t p h
],

PP2PC:[
0,
[0,44032+588*0],//g
[0,44032+588*1],//gg
[1,44032+588*9],//gs
[0,44032+588*2],//n
[4,44032+588*12],//nj
[4,44032+588*18],//nh
[0,44032+588*3],//d
[0,44032+588*5],//r
[8,44032+588*0],//lg
[8,44032+588*6],//lm
[8,44032+588*7],//lb
[8,44032+588*9],//ls
[8,44032+588*16],//lt
[8,44032+588*17],//lp
[8,44032+588*18],//lh
[0,44032+588*6],//m
[0,44032+588*7],//b
[17,44032+588*9],// bs
[0,44032+588*9],//s
[0,44032+588*10],//ss
[0,44032+588*11],//ng
[0,44032+588*12],//j
[0,44032+588*14],//ch
[0,44032+588*15],//k
[0,44032+588*16],//t
[0,44032+588*17],//p
[0,44032+588*18]//h
],

P2PP:[
0,{'\u3131':2, '\u3145':3}, //g
0,0,{'\u3148':5, '\u314e':6}, //n
0,0,0,{'\u3131':9, '\u3141':10, '\u3142':11, '\u3145':12, '\u314c':13, '\u314d':14, '\u314e':15}, //r
0,0,0,0,0,0,0, // l*
0,{'\u3145':18}, //b
0, {'\u3145':20}, //s
0,0,0,0,0,0,0,0]
}
function parseHangul(char){
        var code=char.charCodeAt()
        if(code<=0x314e) return [Korean.Jamo[char][1],-1,0]
        code -= 44032
        var arr=[]
        arr[0]=44032+588*(code / 588 >>0)
        code %= 588
        arr[1]= 28*(code / 28 >>0)
        arr[2]= code % 28
        return arr
}
VirtualKeyboard.addLayout('kr', '2 Beolsik',
[96,49,50,51,52,53,54,55,56,57,48,45,61,92,12610,12616,12599,12593,12613,12635,12629,12625,12624,12628,91,93,12609,12596,12615,12601,12622,12631,12627,12623,12643,59,39,12619,12620,12618,12621,12640,12636,12641,44,46,47],
{'0': [126,33,64,35,36,37,94,38,42,40,41,95,43,124,12611,12617,12600,12594,12614,12635,12629,12625,12626,12630,123,125],
'35': [58,34],
'44': [60,62,63]},
null,
function(char, buf){
        var jamo=Korean.Jamo[char]
        //debugger
        if(buf==''){
                if(!jamo)       return [char,0]
                else{
                        if(jamo[0] & 2) return [char,1] //can start a syllable
                        else return [char,0]
                }
        }else{ // full buf
                var CVC=parseHangul(buf)
                if(char=='\u0008'){
                        if(CVC[2]) return [ String.fromCharCode( CVC[0]+CVC[1]+Korean.PP2P[CVC[2]]), 1]
                        else if(CVC[1]>-1){
                                var VV2V=Korean.VV2V[CVC[1]/28]
                                if(VV2V) return [String.fromCharCode(CVC[0]+VV2V), 1]
                                else return [Korean.CV2C[(CVC[0]-44032)/588], 1]
                        }
                        else if(Korean.CC2C[buf])return [Korean.CC2C[buf],1]
                        else return['',0] 
                }else if(!jamo){
                        return [buf+char,0]
                }else if(CVC[2]){ // [CVC]
                        if(jamo[0] & 2) { //[CVC] +C
                                var P2PP = Korean.P2PP[CVC[2]][char]    
                                if(P2PP) return [ String.fromCharCode( CVC[0]+CVC[1]+P2PP), 1] // [CVCC]
                                else return [buf+char, 1] // CVC, [C]
                        }else{// [CVC] +V
                                //debugger
                                 return [String.fromCharCode( CVC[0]+CVC[1]+Korean.PP2PC[CVC[2]][0])+
                                 String.fromCharCode( Korean.PP2PC[CVC[2]][1]+Korean.Jamo[char][1]),
                                 1] // CV(P) [PV]
                        }
                }else if(CVC[1]>-1){ // [CV]
                        if(jamo[0] & 4) // [CV] +P
                                return [String.fromCharCode(CVC[0]+CVC[1]+jamo[2]), 1] // [CVC]
                        else if(jamo[0] & 1){ // [CV]+V
                                var V2VV = Korean.V2VV[CVC[1]/28][char]
                                if(V2VV) return [String.fromCharCode(CVC[0]+V2VV), 1] // [CVV]
                                else return [buf+char, 0] // CV, V []
                        }
                        else return [buf+char, 1] //CV [C]
                }
                else if(jamo[0] & 1) {// [C] +V 
                                return [String.fromCharCode(Korean.Jamo[buf][1]+jamo[1]), 1]
                }else{ //[C]+C
                                if(buf==char && Korean.C2CC[buf]) return [Korean.C2CC[buf],1]
                                else return [buf+char, 1]
                }
        }
}
)